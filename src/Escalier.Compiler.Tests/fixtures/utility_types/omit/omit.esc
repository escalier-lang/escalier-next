type Pick<T, K: keyof T> = {
  [P]: T[P] for P in K
};
type Exclude<T, U> = if T : U { never } else { T };
type AnyKey = string | number | symbol;
type Omit<T, K: AnyKey> = Pick<T, Exclude<keyof T, K>>;

type Foo = {a: number, b: string, c: boolean};
type Bar = Omit<Foo, "b">;
