input: 
    export type Point = {x: number, y: number};
    export let x = 5;
    export let mut y = 10;
    export fn add(a, b) {
      return a + b;
    }
    let sum = add(x, y);
    
output: Ok
  { Items =
     [Stmt
        { Kind =
           Decl
             { Kind =
                TypeDecl
                  { Declare = false
                    Export = true
                    Name = "Point"
                    TypeAnn =
                     { Kind =
                        Object
                          { Elems =
                             [Property
                                { Name = String "x"
                                  TypeAnn = { Kind = Keyword Number
                                              Span = { Start = (Ln: 2, Col: 29)
                                                       Stop = (Ln: 2, Col: 35) }
                                              InferredType = None }
                                  Optional = false
                                  Readonly = false
                                  Static = false };
                              Property
                                { Name = String "y"
                                  TypeAnn = { Kind = Keyword Number
                                              Span = { Start = (Ln: 2, Col: 40)
                                                       Stop = (Ln: 2, Col: 46) }
                                              InferredType = None }
                                  Optional = false
                                  Readonly = false
                                  Static = false }]
                            Immutable = false
                            Exact = true }
                       Span = { Start = (Ln: 2, Col: 25)
                                Stop = (Ln: 2, Col: 47) }
                       InferredType = None }
                    TypeParams = None }
               Span = { Start = (Ln: 2, Col: 5)
                        Stop = (Ln: 3, Col: 5) } }
          Span = { Start = (Ln: 2, Col: 5)
                   Stop = (Ln: 3, Col: 5) } };
      Stmt
        { Kind =
           Decl
             { Kind = VarDecl { Declare = false
                                Export = true
                                Pattern = { Kind = Ident { Name = "x"
                                                           IsMut = false
                                                           Assertion = None }
                                            Span = { Start = (Ln: 3, Col: 16)
                                                     Stop = (Ln: 3, Col: 18) }
                                            InferredType = None }
                                TypeAnn = None
                                Init = Some { Kind = Literal (Number (Int 5))
                                              Span = { Start = (Ln: 3, Col: 20)
                                                       Stop = (Ln: 3, Col: 21) }
                                              InferredType = None }
                                Else = None }
               Span = { Start = (Ln: 3, Col: 5)
                        Stop = (Ln: 4, Col: 5) } }
          Span = { Start = (Ln: 3, Col: 5)
                   Stop = (Ln: 4, Col: 5) } };
      Stmt
        { Kind =
           Decl
             { Kind = VarDecl { Declare = false
                                Export = true
                                Pattern = { Kind = Ident { Name = "y"
                                                           IsMut = true
                                                           Assertion = None }
                                            Span = { Start = (Ln: 4, Col: 16)
                                                     Stop = (Ln: 4, Col: 22) }
                                            InferredType = None }
                                TypeAnn = None
                                Init = Some { Kind = Literal (Number (Int 10))
                                              Span = { Start = (Ln: 4, Col: 24)
                                                       Stop = (Ln: 4, Col: 26) }
                                              InferredType = None }
                                Else = None }
               Span = { Start = (Ln: 4, Col: 5)
                        Stop = (Ln: 5, Col: 5) } }
          Span = { Start = (Ln: 4, Col: 5)
                   Stop = (Ln: 5, Col: 5) } };
      Stmt
        { Kind =
           Decl
             { Kind =
                FnDecl
                  { Declare = false
                    Export = true
                    Name = "add"
                    Sig =
                     { TypeParams = None
                       Self = None
                       ParamList =
                        [{ Pattern = { Kind = Ident { Name = "a"
                                                      IsMut = false
                                                      Assertion = None }
                                       Span = { Start = (Ln: 5, Col: 19)
                                                Stop = (Ln: 5, Col: 20) }
                                       InferredType = None }
                           Optional = false
                           TypeAnn = None };
                         { Pattern = { Kind = Ident { Name = "b"
                                                      IsMut = false
                                                      Assertion = None }
                                       Span = { Start = (Ln: 5, Col: 22)
                                                Stop = (Ln: 5, Col: 23) }
                                       InferredType = None }
                           Optional = false
                           TypeAnn = None }]
                       ReturnType = None
                       Throws = None
                       IsAsync = false }
                    Body =
                     Some
                       (Block
                          { Span = { Start = (Ln: 5, Col: 25)
                                     Stop = (Ln: 8, Col: 5) }
                            Stmts =
                             [{ Kind =
                                 Return
                                   (Some
                                      { Kind =
                                         Binary
                                           { Op = "+"
                                             Left =
                                              { Kind = Identifier { Name = "a" }
                                                Span =
                                                 { Start = (Ln: 6, Col: 14)
                                                   Stop = (Ln: 6, Col: 16) }
                                                InferredType = None }
                                             Right =
                                              { Kind = Identifier { Name = "b" }
                                                Span =
                                                 { Start = (Ln: 6, Col: 18)
                                                   Stop = (Ln: 6, Col: 19) }
                                                InferredType = None } }
                                        Span = { Start = (Ln: 6, Col: 14)
                                                 Stop = (Ln: 6, Col: 19) }
                                        InferredType = None })
                                Span = { Start = (Ln: 6, Col: 7)
                                         Stop = (Ln: 7, Col: 5) } }] }) }
               Span = { Start = (Ln: 5, Col: 5)
                        Stop = (Ln: 8, Col: 5) } }
          Span = { Start = (Ln: 5, Col: 5)
                   Stop = (Ln: 8, Col: 5) } };
      Stmt
        { Kind =
           Decl
             { Kind =
                VarDecl
                  { Declare = false
                    Export = false
                    Pattern = { Kind = Ident { Name = "sum"
                                               IsMut = false
                                               Assertion = None }
                                Span = { Start = (Ln: 8, Col: 9)
                                         Stop = (Ln: 8, Col: 13) }
                                InferredType = None }
                    TypeAnn = None
                    Init =
                     Some
                       { Kind =
                          Call
                            { Callee = { Kind = Identifier { Name = "add" }
                                         Span = { Start = (Ln: 8, Col: 15)
                                                  Stop = (Ln: 8, Col: 18) }
                                         InferredType = None }
                              TypeArgs = None
                              Args =
                               [{ Kind = Identifier { Name = "x" }
                                  Span = { Start = (Ln: 8, Col: 19)
                                           Stop = (Ln: 8, Col: 20) }
                                  InferredType = None };
                                { Kind = Identifier { Name = "y" }
                                  Span = { Start = (Ln: 8, Col: 22)
                                           Stop = (Ln: 8, Col: 23) }
                                  InferredType = None }]
                              OptChain = false
                              Throws = None }
                         Span = { Start = (Ln: 8, Col: 15)
                                  Stop = (Ln: 8, Col: 24) }
                         InferredType = None }
                    Else = None }
               Span = { Start = (Ln: 8, Col: 5)
                        Stop = (Ln: 9, Col: 5) } }
          Span = { Start = (Ln: 8, Col: 5)
                   Stop = (Ln: 9, Col: 5) } }] }