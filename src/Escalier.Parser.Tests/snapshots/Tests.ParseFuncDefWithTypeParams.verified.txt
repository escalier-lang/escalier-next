input: fn <T: Foo = Bar>(x: T) -> T { x }
output: Success: { kind =
   Function
     { sig' =
        { type_params =
           Some [{ span = { start = (Ln: 1, Col: 5)
                            stop = (Ln: 1, Col: 17) }
                   name = "T"
                   constraint_ = Some { kind = TypeRef ("Foo", None)
                                        span = { start = (Ln: 1, Col: 8)
                                                 stop = (Ln: 1, Col: 12) }
                                        inferred_type = None }
                   default_ = Some { kind = TypeRef ("Bar", None)
                                     span = { start = (Ln: 1, Col: 14)
                                              stop = (Ln: 1, Col: 17) }
                                     inferred_type = None } }]
          param_list =
           [{ pattern = { kind = Identifier { span = { start = (Ln: 1, Col: 19)
                                                       stop = (Ln: 1, Col: 20) }
                                              name = "x"
                                              isMut = false }
                          span = { start = (Ln: 1, Col: 19)
                                   stop = (Ln: 1, Col: 20) }
                          inferred_type = None }
              typeAnn = Some { kind = TypeRef ("T", None)
                               span = { start = (Ln: 1, Col: 22)
                                        stop = (Ln: 1, Col: 23) }
                               inferred_type = None }
              optional = false }]
          return_type = Some { kind = TypeRef ("T", None)
                               span = { start = (Ln: 1, Col: 28)
                                        stop = (Ln: 1, Col: 30) }
                               inferred_type = None }
          throws = None }
       body =
        Block { span = { start = (Ln: 1, Col: 30)
                         stop = (Ln: 1, Col: 35) }
                stmts = [{ span = { start = (Ln: 1, Col: 32)
                                    stop = (Ln: 1, Col: 34) }
                           kind = Expr { kind = Identifier "x"
                                         span = { start = (Ln: 1, Col: 32)
                                                  stop = (Ln: 1, Col: 34) }
                                         inferred_type = None } }] } }
  span = { start = (Ln: 1, Col: 1)
           stop = (Ln: 1, Col: 35) }
  inferred_type = None }