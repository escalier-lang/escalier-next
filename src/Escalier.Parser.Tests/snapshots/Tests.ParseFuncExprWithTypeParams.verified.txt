input: fn <T: Foo = Bar>(x: T) -> T { x };
output: Ok
  { Items =
     [Stmt
        { Kind =
           Expr
             { Kind =
                Function
                  { Sig =
                     { TypeParams =
                        Some
                          [{ Span = { Start = (Ln: 1, Col: 5)
                                      Stop = (Ln: 1, Col: 17) }
                             Name = "T"
                             Constraint =
                              Some { Kind = TypeRef { Ident = Ident "Foo"
                                                      TypeArgs = None }
                                     Span = { Start = (Ln: 1, Col: 8)
                                              Stop = (Ln: 1, Col: 12) }
                                     InferredType = None }
                             Default =
                              Some { Kind = TypeRef { Ident = Ident "Bar"
                                                      TypeArgs = None }
                                     Span = { Start = (Ln: 1, Col: 14)
                                              Stop = (Ln: 1, Col: 17) }
                                     InferredType = None } }]
                       Self = None
                       ParamList =
                        [{ Pattern = { Kind = Ident { Name = "x"
                                                      IsMut = false
                                                      Assertion = None }
                                       Span = { Start = (Ln: 1, Col: 19)
                                                Stop = (Ln: 1, Col: 20) }
                                       InferredType = None }
                           TypeAnn = Some { Kind = TypeRef { Ident = Ident "T"
                                                             TypeArgs = None }
                                            Span = { Start = (Ln: 1, Col: 22)
                                                     Stop = (Ln: 1, Col: 23) }
                                            InferredType = None }
                           Optional = false }]
                       ReturnType = Some { Kind = TypeRef { Ident = Ident "T"
                                                            TypeArgs = None }
                                           Span = { Start = (Ln: 1, Col: 28)
                                                    Stop = (Ln: 1, Col: 30) }
                                           InferredType = None }
                       Throws = None
                       IsAsync = false }
                    Body =
                     Block
                       { Span = { Start = (Ln: 1, Col: 30)
                                  Stop = (Ln: 1, Col: 35) }
                         Stmts =
                          [{ Kind = Expr { Kind = Identifier "x"
                                           Span = { Start = (Ln: 1, Col: 32)
                                                    Stop = (Ln: 1, Col: 34) }
                                           InferredType = None }
                             Span = { Start = (Ln: 1, Col: 32)
                                      Stop = (Ln: 1, Col: 34) } }] } }
               Span = { Start = (Ln: 1, Col: 1)
                        Stop = (Ln: 1, Col: 35) }
               InferredType = None }
          Span = { Start = (Ln: 1, Col: 1)
                   Stop = (Ln: 1, Col: 35) } }] }