input: fn <T: Foo = Bar>(x: T) -> T throws "RangeError"
output: Success: { Kind =
   Function
     { TypeParams =
        Some [{ Span = { Start = (Ln: 1, Col: 5)
                         Stop = (Ln: 1, Col: 17) }
                Name = "T"
                Constraint = Some { Kind = TypeRef ("Foo", None)
                                    Span = { Start = (Ln: 1, Col: 8)
                                             Stop = (Ln: 1, Col: 12) }
                                    InferredType = None }
                Default = Some { Kind = TypeRef ("Bar", None)
                                 Span = { Start = (Ln: 1, Col: 14)
                                          Stop = (Ln: 1, Col: 17) }
                                 InferredType = None } }]
       ParamList =
        [{ Pattern = { Kind = Identifier { Span = { Start = (Ln: 1, Col: 19)
                                                    Stop = (Ln: 1, Col: 20) }
                                           Name = "x"
                                           IsMut = false }
                       Span = { Start = (Ln: 1, Col: 19)
                                Stop = (Ln: 1, Col: 20) }
                       InferredType = None }
           TypeAnn = { Kind = TypeRef ("T", None)
                       Span = { Start = (Ln: 1, Col: 22)
                                Stop = (Ln: 1, Col: 23) }
                       InferredType = None }
           Optional = false }]
       ReturnType = { Kind = TypeRef ("T", None)
                      Span = { Start = (Ln: 1, Col: 28)
                               Stop = (Ln: 1, Col: 30) }
                      InferredType = None }
       Throws = Some { Kind = Literal (String "RangeError")
                       Span = { Start = (Ln: 1, Col: 37)
                                Stop = (Ln: 1, Col: 49) }
                       InferredType = None } }
  Span = { Start = (Ln: 1, Col: 1)
           Stop = (Ln: 1, Col: 49) }
  InferredType = None }