input: 
    impl Foo<T> {
      fn bar(self) {
        return self.x
      }
      fn baz(mut self, x: T) {
        self.x = x
      }
    }
    
output: Ok
  { Items =
     [Stmt
        { Kind =
           Impl
             { TypeParams = Some [{ Span = { Start = (Ln: 2, Col: 14)
                                             Stop = (Ln: 2, Col: 15) }
                                    Name = "T"
                                    Constraint = None
                                    Default = None }]
               Self = "Foo"
               Elems =
                [Method
                   { Name = "bar"
                     Sig =
                      { TypeParams = None
                        Self =
                         Some { Pattern = { Kind = Ident { Name = "self"
                                                           IsMut = false
                                                           Assertion = None }
                                            Span = { Start = (Ln: 3, Col: 14)
                                                     Stop = (Ln: 3, Col: 18) }
                                            InferredType = None }
                                TypeAnn = None
                                Optional = false }
                        ParamList = []
                        ReturnType = None
                        Throws = None
                        IsAsync = false }
                     Body =
                      Block
                        { Span = { Start = (Ln: 3, Col: 20)
                                   Stop = (Ln: 6, Col: 7) }
                          Stmts =
                           [{ Kind =
                               Return
                                 (Some
                                    { Kind =
                                       Member
                                         ({ Kind = Identifier "self"
                                            Span = { Start = (Ln: 4, Col: 16)
                                                     Stop = (Ln: 4, Col: 20) }
                                            InferredType = None }, "x", false)
                                      Span = { Start = (Ln: 4, Col: 16)
                                               Stop = (Ln: 5, Col: 7) }
                                      InferredType = None })
                              Span = { Start = (Ln: 4, Col: 9)
                                       Stop = (Ln: 5, Col: 7) } }] } };
                 Method
                   { Name = "baz"
                     Sig =
                      { TypeParams = None
                        Self =
                         Some { Pattern = { Kind = Ident { Name = "self"
                                                           IsMut = true
                                                           Assertion = None }
                                            Span = { Start = (Ln: 6, Col: 14)
                                                     Stop = (Ln: 6, Col: 22) }
                                            InferredType = None }
                                TypeAnn = None
                                Optional = false }
                        ParamList =
                         [{ Pattern = { Kind = Ident { Name = "x"
                                                       IsMut = false
                                                       Assertion = None }
                                        Span = { Start = (Ln: 6, Col: 24)
                                                 Stop = (Ln: 6, Col: 25) }
                                        InferredType = None }
                            TypeAnn = Some { Kind = TypeRef { Ident = "T"
                                                              TypeArgs = None }
                                             Span = { Start = (Ln: 6, Col: 27)
                                                      Stop = (Ln: 6, Col: 28) }
                                             InferredType = None }
                            Optional = false }]
                        ReturnType = None
                        Throws = None
                        IsAsync = false }
                     Body =
                      Block
                        { Span = { Start = (Ln: 6, Col: 30)
                                   Stop = (Ln: 9, Col: 5) }
                          Stmts =
                           [{ Kind =
                               Expr
                                 { Kind =
                                    Assign
                                      ("=",
                                       { Kind =
                                          Member
                                            ({ Kind = Identifier "self"
                                               Span =
                                                { Start = (Ln: 7, Col: 9)
                                                  Stop = (Ln: 7, Col: 13) }
                                               InferredType = None }, "x", false)
                                         Span = { Start = (Ln: 7, Col: 9)
                                                  Stop = (Ln: 7, Col: 16) }
                                         InferredType = None },
                                       { Kind = Identifier "x"
                                         Span = { Start = (Ln: 7, Col: 18)
                                                  Stop = (Ln: 8, Col: 7) }
                                         InferredType = None })
                                   Span = { Start = (Ln: 7, Col: 9)
                                            Stop = (Ln: 8, Col: 7) }
                                   InferredType = None }
                              Span = { Start = (Ln: 7, Col: 9)
                                       Stop = (Ln: 8, Col: 7) } }] } }] }
          Span = { Start = (Ln: 2, Col: 5)
                   Stop = (Ln: 10, Col: 5) } }] }