input: 
    type Point = {x: number, y: number}
    let {x, y}: Point = {x: 5, y: 10}
    let p: Point = {x, y}
    let foo = fn ({x, y}: Point) => x + y
    
output: Ok
  { Items =
     [Stmt
        { Kind =
           Decl
             { Kind =
                TypeDecl
                  { Name = "Point"
                    TypeAnn =
                     { Kind =
                        Object
                          { Elems =
                             [Property
                                { Name = String "x"
                                  TypeAnn = { Kind = Keyword Number
                                              Span = { Start = (Ln: 2, Col: 22)
                                                       Stop = (Ln: 2, Col: 28) }
                                              InferredType = None }
                                  Optional = false
                                  Readonly = false };
                              Property
                                { Name = String "y"
                                  TypeAnn = { Kind = Keyword Number
                                              Span = { Start = (Ln: 2, Col: 33)
                                                       Stop = (Ln: 2, Col: 39) }
                                              InferredType = None }
                                  Optional = false
                                  Readonly = false }]
                            Immutable = false }
                       Span = { Start = (Ln: 2, Col: 18)
                                Stop = (Ln: 3, Col: 5) }
                       InferredType = None }
                    TypeParams = None }
               Span = { Start = (Ln: 2, Col: 5)
                        Stop = (Ln: 3, Col: 5) } }
          Span = { Start = (Ln: 2, Col: 5)
                   Stop = (Ln: 3, Col: 5) } };
      Stmt
        { Kind =
           Decl
             { Kind =
                VarDecl
                  { Pattern =
                     { Kind =
                        Object
                          { Elems =
                             [ShorthandPat { Span = { Start = (Ln: 3, Col: 10)
                                                      Stop = (Ln: 3, Col: 11) }
                                             Name = "x"
                                             IsMut = false
                                             Default = None
                                             Assertion = None };
                              ShorthandPat { Span = { Start = (Ln: 3, Col: 13)
                                                      Stop = (Ln: 3, Col: 14) }
                                             Name = "y"
                                             IsMut = false
                                             Default = None
                                             Assertion = None }]
                            Immutable = false }
                       Span = { Start = (Ln: 3, Col: 9)
                                Stop = (Ln: 3, Col: 15) }
                       InferredType = None }
                    TypeAnn = Some { Kind = TypeRef { Ident = "Point"
                                                      TypeArgs = None }
                                     Span = { Start = (Ln: 3, Col: 17)
                                              Stop = (Ln: 3, Col: 23) }
                                     InferredType = None }
                    Init =
                     { Kind =
                        Object
                          { Elems =
                             [Property
                                ({ Start = (Ln: 3, Col: 26)
                                   Stop = (Ln: 3, Col: 30) }, String "x",
                                 { Kind = Literal (Number (Int 5))
                                   Span = { Start = (Ln: 3, Col: 29)
                                            Stop = (Ln: 3, Col: 30) }
                                   InferredType = None });
                              Property
                                ({ Start = (Ln: 3, Col: 32)
                                   Stop = (Ln: 3, Col: 37) }, String "y",
                                 { Kind = Literal (Number (Int 10))
                                   Span = { Start = (Ln: 3, Col: 35)
                                            Stop = (Ln: 3, Col: 37) }
                                   InferredType = None })]
                            Immutable = false }
                       Span = { Start = (Ln: 3, Col: 25)
                                Stop = (Ln: 4, Col: 5) }
                       InferredType = None } }
               Span = { Start = (Ln: 3, Col: 5)
                        Stop = (Ln: 4, Col: 5) } }
          Span = { Start = (Ln: 3, Col: 5)
                   Stop = (Ln: 4, Col: 5) } };
      Stmt
        { Kind =
           Decl
             { Kind =
                VarDecl
                  { Pattern = { Kind = Ident { Name = "p"
                                               IsMut = false
                                               Assertion = None }
                                Span = { Start = (Ln: 4, Col: 9)
                                         Stop = (Ln: 4, Col: 10) }
                                InferredType = None }
                    TypeAnn = Some { Kind = TypeRef { Ident = "Point"
                                                      TypeArgs = None }
                                     Span = { Start = (Ln: 4, Col: 12)
                                              Stop = (Ln: 4, Col: 18) }
                                     InferredType = None }
                    Init =
                     { Kind =
                        Object
                          { Elems =
                             [Shorthand ({ Start = (Ln: 4, Col: 21)
                                           Stop = (Ln: 4, Col: 22) }, "x");
                              Shorthand ({ Start = (Ln: 4, Col: 24)
                                           Stop = (Ln: 4, Col: 25) }, "y")]
                            Immutable = false }
                       Span = { Start = (Ln: 4, Col: 20)
                                Stop = (Ln: 5, Col: 5) }
                       InferredType = None } }
               Span = { Start = (Ln: 4, Col: 5)
                        Stop = (Ln: 5, Col: 5) } }
          Span = { Start = (Ln: 4, Col: 5)
                   Stop = (Ln: 5, Col: 5) } };
      Stmt
        { Kind =
           Decl
             { Kind =
                VarDecl
                  { Pattern = { Kind = Ident { Name = "foo"
                                               IsMut = false
                                               Assertion = None }
                                Span = { Start = (Ln: 5, Col: 9)
                                         Stop = (Ln: 5, Col: 13) }
                                InferredType = None }
                    TypeAnn = None
                    Init =
                     { Kind =
                        Function
                          { Sig =
                             { TypeParams = None
                               Self = None
                               ParamList =
                                [{ Pattern =
                                    { Kind =
                                       Object
                                         { Elems =
                                            [ShorthandPat
                                               { Span =
                                                  { Start = (Ln: 5, Col: 20)
                                                    Stop = (Ln: 5, Col: 21) }
                                                 Name = "x"
                                                 IsMut = false
                                                 Default = None
                                                 Assertion = None };
                                             ShorthandPat
                                               { Span =
                                                  { Start = (Ln: 5, Col: 23)
                                                    Stop = (Ln: 5, Col: 24) }
                                                 Name = "y"
                                                 IsMut = false
                                                 Default = None
                                                 Assertion = None }]
                                           Immutable = false }
                                      Span = { Start = (Ln: 5, Col: 19)
                                               Stop = (Ln: 5, Col: 25) }
                                      InferredType = None }
                                   TypeAnn =
                                    Some { Kind = TypeRef { Ident = "Point"
                                                            TypeArgs = None }
                                           Span = { Start = (Ln: 5, Col: 27)
                                                    Stop = (Ln: 5, Col: 32) }
                                           InferredType = None }
                                   Optional = false }]
                               ReturnType = None
                               Throws = None
                               IsAsync = false }
                            Body =
                             Expr
                               { Kind =
                                  Binary
                                    ("+", { Kind = Identifier "x"
                                            Span = { Start = (Ln: 5, Col: 37)
                                                     Stop = (Ln: 5, Col: 39) }
                                            InferredType = None },
                                     { Kind = Identifier "y"
                                       Span = { Start = (Ln: 5, Col: 41)
                                                Stop = (Ln: 6, Col: 5) }
                                       InferredType = None })
                                 Span = { Start = (Ln: 5, Col: 37)
                                          Stop = (Ln: 6, Col: 5) }
                                 InferredType = None } }
                       Span = { Start = (Ln: 5, Col: 15)
                                Stop = (Ln: 6, Col: 5) }
                       InferredType = None } }
               Span = { Start = (Ln: 5, Col: 5)
                        Stop = (Ln: 6, Col: 5) } }
          Span = { Start = (Ln: 5, Col: 5)
                   Stop = (Ln: 6, Col: 5) } }] }