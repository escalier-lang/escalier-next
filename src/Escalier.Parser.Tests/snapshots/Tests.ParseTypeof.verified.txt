input: 
    let iterator: typeof Symbol.iterator = Symbol.iterator;
    
output: Ok
  { Items =
     [Stmt
        { Kind =
           Decl
             { Kind =
                VarDecl
                  { Declare = false
                    Pattern = { Kind = Ident { Name = "iterator"
                                               IsMut = false
                                               Assertion = None }
                                Span = { Start = (Ln: 2, Col: 9)
                                         Stop = (Ln: 2, Col: 17) }
                                InferredType = None }
                    TypeAnn =
                     Some { Kind = Typeof (Member (Ident "Symbol", "iterator"))
                            Span = { Start = (Ln: 2, Col: 19)
                                     Stop = (Ln: 2, Col: 42) }
                            InferredType = None }
                    Init =
                     Some
                       { Kind =
                          Member
                            { Target = { Kind = Identifier { Name = "Symbol" }
                                         Span = { Start = (Ln: 2, Col: 44)
                                                  Stop = (Ln: 2, Col: 50) }
                                         InferredType = None }
                              Name = "iterator"
                              OptChain = false }
                         Span = { Start = (Ln: 2, Col: 44)
                                  Stop = (Ln: 2, Col: 59) }
                         InferredType = None }
                    Else = None }
               Span = { Start = (Ln: 2, Col: 5)
                        Stop = (Ln: 3, Col: 5) } }
          Span = { Start = (Ln: 2, Col: 5)
                   Stop = (Ln: 3, Col: 5) } }] }